---
# Source: redis/templates/redis-service-template.yml
kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: arches-mdclone24
spec:
  type: ClusterIP
  ports:
  - port: 443
    protocol: TCP
    targetPort: 12000
    name: '12000'
  selector:
    app: redis
---
# Source: redis/templates/redis-template.yml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: redis
  namespace: arches-mdclone24
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      serviceAccountName: "mdclone-sa"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
        - name: redis
          securityContext:
            capabilities:
              add: ["SYS_RESOURCE"]
          image: quay.vapo.va.gov/etil/redis:6.4.2-43.rhel8-openshift
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/bash"
                  - "-c"
                  - |
                    # sleep enough time for the redis-enterprise to initialize
                    sleep 15
                    # make sure there is not any cluster running
                    if [ ! -f /var/opt/redislabs/persist/ccs/ccs-redis.rdb ];then
                      # create a cluster
                      rladmin cluster create name cluster.local username lavih.berenstein@mdclone.com password redislabs123
                      # create a database
                      curl -k -u "lavih.berenstein@mdclone.com:redislabs123" --request POST --url "https://localhost:9443/v1/bdbs" --header 'content-type: application/json' --data '{"name":"db1","type":"redis","memory_size":1024,"port":12000}'
                      # wait for db to start
                      sleep 5
                      # set database password
                      curl -k -u "lavih.berenstein@mdclone.com:redislabs123" --request POST --url "https://localhost:9443/v1/bdbs/1/passwords" --header 'content-type: application/json' --data '{"password": "Rrr@24680"}'
                    fi
          imagePullPolicy: Always
          ports:
          - containerPort: 8443
          - containerPort: 9443
          - containerPort: 12000
          resources:
            requests:
              memory: 1Gi      
      imagePullSecrets:
      - name: docker.io-pull-secret
      restartPolicy: Always
---
# Source: redis/templates/redis-ingress-template.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: redis
  namespace: arches-mdclone24
  annotations:
    nginx.ingress/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: '10g'
    nginx.ingress.kubernetes.io/client-max-body-size: '10g'
    nginx.ingress.kubernetes.io/client-body-buffer-size: '10g'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '1800'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '1800'
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '1800'
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: '1800'
    nginx.ingress.kubernetes.io/fail-timeout: '1800'
    nginx.ingress.kubernetes.io/auth-keepalive-timeout: '1800'
    #
    haproxy.router.openshift.io/timeout: 1800s
    router.openshift.io/haproxy.health.check.interval: 1800s
    router.openshift.io/timeout-check: 1800s
    haproxy.org/timeout-check: 1800s
    #
    haproxy.router.openshift.io/timeout-tunnel: '1h'
    haproxy.router.openshift.io/timeout-client: '1800s'
    haproxy.router.openshift.io/timeout-client-fin: '1800s'
    haproxy.router.openshift.io/timeout-connect: '1800s'
    haproxy.router.openshift.io/timeout-http-request: '1800s'
    haproxy.router.openshift.io/timeout-keep-alive: '1800s'
    haproxy.router.openshift.io/timeout-queue: '1800s'
    haproxy.router.openshift.io/timeout-server: '1800s'
    haproxy.router.openshift.io/timeout-server-fin: '1800s'
    haproxy.router.openshift.io/timeout-stop: '1800s'
    haproxy.router.openshift.io/timeout-check: 1800s
    haproxy.router.openshift.io/proxy-body-size: '10g'
spec:
  rules:
    - host: 
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: redis
                port:
                  number: 443
  tls:
    - {}
---
# Source: redis/templates/redis-scc.yml
#oc adm policy add-scc-to-user privileged -z mdclone-sa -n mdclone
#oc adm policy add-scc-to-user anyuid -z mdclone-sa -n mdclone
#oc adm policy add-scc-to-user privileged -z mdclone-sa -n mdclone
#oc adm policy remove-scc-from-user privileged -z mdclone-sa -n mdclone
#oc adm policy remove-scc-from-user anyuid -z mdclone-sa -n mdclone

allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities:
- SYS_RESOURCE
apiVersion: security.openshift.io/v1
defaultAddCapabilities: null
fsGroup:
 ranges:
 - max: 1001
   min: 1001
 type: MustRunAs
groups: []
kind: SecurityContextConstraints
metadata:
 generation: 1
 name: redis-enterprise-scc-mdclone24
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities: null
runAsUser:
 type: MustRunAs
 uid: 1001
seLinuxContext:
 type: RunAsAny
supplementalGroups:
 type: RunAsAny
users: []
volumes:
- awsElasticBlockStore
- azureDisk
- azureFile
- cephFS
- cinder
- configMap
- csi
- downwardAPI
- emptyDir
- ephemeral
- fc
- flexVolume
- flocker
- gcePersistentDisk
- gitRepo
- glusterfs
- iscsi
- nfs
- persistentVolumeClaim
- photonPersistentDisk
- portworxVolume
- projected
- quobyte
- rbd
- scaleIO
- secret
- storageOS
- vsphere
---
# Source: redis/templates/redis-scc.yml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
 name: scc-mdclone-redis-enterprise-role-binding24
subjects:
- kind: ServiceAccount
 name: mdclone-sa
 namespace: arches-mdclone24
roleRef:
 kind: ClusterRole
 name: scc-mdclone-redis-enterprise-role24
 apiGroup: rbac.authorization.k8s.io
---
# Source: redis/templates/redis-scc.yml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: scc-mdclone-redis-enterprise-role24
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
